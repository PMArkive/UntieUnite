// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/res_TaskIDTypeMatch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbProtocol {

  /// <summary>Holder for reflection information generated from Proto/res_TaskIDTypeMatch.proto</summary>
  public static partial class ResTaskIDTypeMatchReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/res_TaskIDTypeMatch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResTaskIDTypeMatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9Qcm90by9yZXNfVGFza0lEVHlwZU1hdGNoLnByb3RvEgtwYl9Qcm90b2Nv",
            "bCJlChFwYlRhc2tJRFR5cGVNYXRjaBISCghUYXNrVHlwZRjJzwEgASgFEhIK",
            "CFRhc2tBdHRyGP7UASABKAUSEwoJVHlwZUlETWluGLy0ASABKAUSEwoJVHlw",
            "ZUlETWF4GLa0ASABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbProtocol.pbTaskIDTypeMatch), global::PbProtocol.pbTaskIDTypeMatch.Parser, new[]{ "TaskType", "TaskAttr", "TypeIDMin", "TypeIDMax" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class pbTaskIDTypeMatch : pb::IMessage<pbTaskIDTypeMatch> {
    private static readonly pb::MessageParser<pbTaskIDTypeMatch> _parser = new pb::MessageParser<pbTaskIDTypeMatch>(() => new pbTaskIDTypeMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pbTaskIDTypeMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbProtocol.ResTaskIDTypeMatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbTaskIDTypeMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbTaskIDTypeMatch(pbTaskIDTypeMatch other) : this() {
      taskType_ = other.taskType_;
      taskAttr_ = other.taskAttr_;
      typeIDMin_ = other.typeIDMin_;
      typeIDMax_ = other.typeIDMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbTaskIDTypeMatch Clone() {
      return new pbTaskIDTypeMatch(this);
    }

    /// <summary>Field number for the "TaskType" field.</summary>
    public const int TaskTypeFieldNumber = 26569;
    private int taskType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "TaskAttr" field.</summary>
    public const int TaskAttrFieldNumber = 27262;
    private int taskAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskAttr {
      get { return taskAttr_; }
      set {
        taskAttr_ = value;
      }
    }

    /// <summary>Field number for the "TypeIDMin" field.</summary>
    public const int TypeIDMinFieldNumber = 23100;
    private int typeIDMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeIDMin {
      get { return typeIDMin_; }
      set {
        typeIDMin_ = value;
      }
    }

    /// <summary>Field number for the "TypeIDMax" field.</summary>
    public const int TypeIDMaxFieldNumber = 23094;
    private int typeIDMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeIDMax {
      get { return typeIDMax_; }
      set {
        typeIDMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pbTaskIDTypeMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pbTaskIDTypeMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if (TaskAttr != other.TaskAttr) return false;
      if (TypeIDMin != other.TypeIDMin) return false;
      if (TypeIDMax != other.TypeIDMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != 0) hash ^= TaskType.GetHashCode();
      if (TaskAttr != 0) hash ^= TaskAttr.GetHashCode();
      if (TypeIDMin != 0) hash ^= TypeIDMin.GetHashCode();
      if (TypeIDMax != 0) hash ^= TypeIDMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeIDMax != 0) {
        output.WriteRawTag(176, 163, 11);
        output.WriteInt32(TypeIDMax);
      }
      if (TypeIDMin != 0) {
        output.WriteRawTag(224, 163, 11);
        output.WriteInt32(TypeIDMin);
      }
      if (TaskType != 0) {
        output.WriteRawTag(200, 252, 12);
        output.WriteInt32(TaskType);
      }
      if (TaskAttr != 0) {
        output.WriteRawTag(240, 167, 13);
        output.WriteInt32(TaskAttr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      if (TaskAttr != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TaskAttr);
      }
      if (TypeIDMin != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TypeIDMin);
      }
      if (TypeIDMax != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TypeIDMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pbTaskIDTypeMatch other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != 0) {
        TaskType = other.TaskType;
      }
      if (other.TaskAttr != 0) {
        TaskAttr = other.TaskAttr;
      }
      if (other.TypeIDMin != 0) {
        TypeIDMin = other.TypeIDMin;
      }
      if (other.TypeIDMax != 0) {
        TypeIDMax = other.TypeIDMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 184752: {
            TypeIDMax = input.ReadInt32();
            break;
          }
          case 184800: {
            TypeIDMin = input.ReadInt32();
            break;
          }
          case 212552: {
            TaskType = input.ReadInt32();
            break;
          }
          case 218096: {
            TaskAttr = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
