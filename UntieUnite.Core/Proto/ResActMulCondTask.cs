// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/res_ActMulCondTask.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbProtocol {

  /// <summary>Holder for reflection information generated from Proto/res_ActMulCondTask.proto</summary>
  public static partial class ResActMulCondTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/res_ActMulCondTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ResActMulCondTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Qcm90by9yZXNfQWN0TXVsQ29uZFRhc2sucHJvdG8SC3BiX1Byb3RvY29s",
            "IjoKFXBiQWN0TXVsQ29uZFRhc2tBd2FyZBIPCgVSZXNJRBjEpQEgASgFEhAK",
            "BlJlc051bRiE0QEgASgFIoUCChBwYkFjdE11bENvbmRUYXNrEhAKBlRhc2tJ",
            "RBj2rgEgASgFEg8KBVNlcUlEGL2uASABKAUSFgoMTWF4RG9uZUNvdW50GJWi",
            "ASABKAUSFQoLTXVsQ29uZFR5cGUYjcwBIAEoBRISCghUYXNrTmFtZRiq5wEg",
            "ASgJEhIKCFRhc2tEZXNjGKi/ASABKAkSGwoRRmluaXNoQ29uZGl0aW9uSUQY",
            "qqwBIAEoBRIXCg1UYXJnZXRQcm9jZXNzGI/qASABKAUSQQoTQWN0TXVsQ29u",
            "ZFRhc2tBd2FyZBjD1gEgAygLMiIucGJfUHJvdG9jb2wucGJBY3RNdWxDb25k",
            "VGFza0F3YXJkKogBCixQQl9NQUNST19NQVhfQUNUTVVMQ09ORFRBU0tfVEFT",
            "S05BTUVfU1RSX0xFThIsCihQQl9NQVhfQUNUTVVMQ09ORFRBU0tfVEFTS05B",
            "TUVfU1RSX0xFTl8wEAASKgomUEJfTUFYX0FDVE1VTENPTkRUQVNLX1RBU0tO",
            "QU1FX1NUUl9MRU4QICqIAQosUEJfTUFDUk9fTUFYX0FDVE1VTENPTkRUQVNL",
            "X1RBU0tERVNDX1NUUl9MRU4SLAooUEJfTUFYX0FDVE1VTENPTkRUQVNLX1RB",
            "U0tERVNDX1NUUl9MRU5fMBAAEioKJlBCX01BWF9BQ1RNVUxDT05EVEFTS19U",
            "QVNLREVTQ19TVFJfTEVOECAqqQEKN1BCX01BQ1JPX01BWF9BQ1RNVUxDT05E",
            "VEFTS19BQ1RNVUxDT05EVEFTS0FXQVJEX0NGR19OVU0SNwozUEJfTUFYX0FD",
            "VE1VTENPTkRUQVNLX0FDVE1VTENPTkRUQVNLQVdBUkRfQ0ZHX05VTV8wEAAS",
            "NQoxUEJfTUFYX0FDVE1VTENPTkRUQVNLX0FDVE1VTENPTkRUQVNLQVdBUkRf",
            "Q0ZHX05VTRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PbProtocol.PB_MACRO_MAX_ACTMULCONDTASK_TASKNAME_STR_LEN), typeof(global::PbProtocol.PB_MACRO_MAX_ACTMULCONDTASK_TASKDESC_STR_LEN), typeof(global::PbProtocol.PB_MACRO_MAX_ACTMULCONDTASK_ACTMULCONDTASKAWARD_CFG_NUM), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbProtocol.pbActMulCondTaskAward), global::PbProtocol.pbActMulCondTaskAward.Parser, new[]{ "ResID", "ResNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PbProtocol.pbActMulCondTask), global::PbProtocol.pbActMulCondTask.Parser, new[]{ "TaskID", "SeqID", "MaxDoneCount", "MulCondType", "TaskName", "TaskDesc", "FinishConditionID", "TargetProcess", "ActMulCondTaskAward" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PB_MACRO_MAX_ACTMULCONDTASK_TASKNAME_STR_LEN {
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_TASKNAME_STR_LEN_0")] PbMaxActmulcondtaskTasknameStrLen0 = 0,
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_TASKNAME_STR_LEN")] PbMaxActmulcondtaskTasknameStrLen = 32,
  }

  public enum PB_MACRO_MAX_ACTMULCONDTASK_TASKDESC_STR_LEN {
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_TASKDESC_STR_LEN_0")] PbMaxActmulcondtaskTaskdescStrLen0 = 0,
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_TASKDESC_STR_LEN")] PbMaxActmulcondtaskTaskdescStrLen = 32,
  }

  public enum PB_MACRO_MAX_ACTMULCONDTASK_ACTMULCONDTASKAWARD_CFG_NUM {
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_ACTMULCONDTASKAWARD_CFG_NUM_0")] PbMaxActmulcondtaskActmulcondtaskawardCfgNum0 = 0,
    [pbr::OriginalName("PB_MAX_ACTMULCONDTASK_ACTMULCONDTASKAWARD_CFG_NUM")] PbMaxActmulcondtaskActmulcondtaskawardCfgNum = 3,
  }

  #endregion

  #region Messages
  public sealed partial class pbActMulCondTaskAward : pb::IMessage<pbActMulCondTaskAward> {
    private static readonly pb::MessageParser<pbActMulCondTaskAward> _parser = new pb::MessageParser<pbActMulCondTaskAward>(() => new pbActMulCondTaskAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pbActMulCondTaskAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbProtocol.ResActMulCondTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTaskAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTaskAward(pbActMulCondTaskAward other) : this() {
      resID_ = other.resID_;
      resNum_ = other.resNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTaskAward Clone() {
      return new pbActMulCondTaskAward(this);
    }

    /// <summary>Field number for the "ResID" field.</summary>
    public const int ResIDFieldNumber = 21188;
    private int resID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResID {
      get { return resID_; }
      set {
        resID_ = value;
      }
    }

    /// <summary>Field number for the "ResNum" field.</summary>
    public const int ResNumFieldNumber = 26756;
    private int resNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResNum {
      get { return resNum_; }
      set {
        resNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pbActMulCondTaskAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pbActMulCondTaskAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResID != other.ResID) return false;
      if (ResNum != other.ResNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResID != 0) hash ^= ResID.GetHashCode();
      if (ResNum != 0) hash ^= ResNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResID != 0) {
        output.WriteRawTag(160, 172, 10);
        output.WriteInt32(ResID);
      }
      if (ResNum != 0) {
        output.WriteRawTag(160, 136, 13);
        output.WriteInt32(ResNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResID != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(ResID);
      }
      if (ResNum != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(ResNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pbActMulCondTaskAward other) {
      if (other == null) {
        return;
      }
      if (other.ResID != 0) {
        ResID = other.ResID;
      }
      if (other.ResNum != 0) {
        ResNum = other.ResNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 169504: {
            ResID = input.ReadInt32();
            break;
          }
          case 214048: {
            ResNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class pbActMulCondTask : pb::IMessage<pbActMulCondTask> {
    private static readonly pb::MessageParser<pbActMulCondTask> _parser = new pb::MessageParser<pbActMulCondTask>(() => new pbActMulCondTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pbActMulCondTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PbProtocol.ResActMulCondTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTask(pbActMulCondTask other) : this() {
      taskID_ = other.taskID_;
      seqID_ = other.seqID_;
      maxDoneCount_ = other.maxDoneCount_;
      mulCondType_ = other.mulCondType_;
      taskName_ = other.taskName_;
      taskDesc_ = other.taskDesc_;
      finishConditionID_ = other.finishConditionID_;
      targetProcess_ = other.targetProcess_;
      actMulCondTaskAward_ = other.actMulCondTaskAward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbActMulCondTask Clone() {
      return new pbActMulCondTask(this);
    }

    /// <summary>Field number for the "TaskID" field.</summary>
    public const int TaskIDFieldNumber = 22390;
    private int taskID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskID {
      get { return taskID_; }
      set {
        taskID_ = value;
      }
    }

    /// <summary>Field number for the "SeqID" field.</summary>
    public const int SeqIDFieldNumber = 22333;
    private int seqID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqID {
      get { return seqID_; }
      set {
        seqID_ = value;
      }
    }

    /// <summary>Field number for the "MaxDoneCount" field.</summary>
    public const int MaxDoneCountFieldNumber = 20757;
    private int maxDoneCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDoneCount {
      get { return maxDoneCount_; }
      set {
        maxDoneCount_ = value;
      }
    }

    /// <summary>Field number for the "MulCondType" field.</summary>
    public const int MulCondTypeFieldNumber = 26125;
    private int mulCondType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MulCondType {
      get { return mulCondType_; }
      set {
        mulCondType_ = value;
      }
    }

    /// <summary>Field number for the "TaskName" field.</summary>
    public const int TaskNameFieldNumber = 29610;
    private string taskName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskName {
      get { return taskName_; }
      set {
        taskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TaskDesc" field.</summary>
    public const int TaskDescFieldNumber = 24488;
    private string taskDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskDesc {
      get { return taskDesc_; }
      set {
        taskDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FinishConditionID" field.</summary>
    public const int FinishConditionIDFieldNumber = 22058;
    private int finishConditionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinishConditionID {
      get { return finishConditionID_; }
      set {
        finishConditionID_ = value;
      }
    }

    /// <summary>Field number for the "TargetProcess" field.</summary>
    public const int TargetProcessFieldNumber = 29967;
    private int targetProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetProcess {
      get { return targetProcess_; }
      set {
        targetProcess_ = value;
      }
    }

    /// <summary>Field number for the "ActMulCondTaskAward" field.</summary>
    public const int ActMulCondTaskAwardFieldNumber = 27459;
    private static readonly pb::FieldCodec<global::PbProtocol.pbActMulCondTaskAward> _repeated_actMulCondTaskAward_codec
        = pb::FieldCodec.ForMessage(219674, global::PbProtocol.pbActMulCondTaskAward.Parser);
    private readonly pbc::RepeatedField<global::PbProtocol.pbActMulCondTaskAward> actMulCondTaskAward_ = new pbc::RepeatedField<global::PbProtocol.pbActMulCondTaskAward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PbProtocol.pbActMulCondTaskAward> ActMulCondTaskAward {
      get { return actMulCondTaskAward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pbActMulCondTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pbActMulCondTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskID != other.TaskID) return false;
      if (SeqID != other.SeqID) return false;
      if (MaxDoneCount != other.MaxDoneCount) return false;
      if (MulCondType != other.MulCondType) return false;
      if (TaskName != other.TaskName) return false;
      if (TaskDesc != other.TaskDesc) return false;
      if (FinishConditionID != other.FinishConditionID) return false;
      if (TargetProcess != other.TargetProcess) return false;
      if(!actMulCondTaskAward_.Equals(other.actMulCondTaskAward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskID != 0) hash ^= TaskID.GetHashCode();
      if (SeqID != 0) hash ^= SeqID.GetHashCode();
      if (MaxDoneCount != 0) hash ^= MaxDoneCount.GetHashCode();
      if (MulCondType != 0) hash ^= MulCondType.GetHashCode();
      if (TaskName.Length != 0) hash ^= TaskName.GetHashCode();
      if (TaskDesc.Length != 0) hash ^= TaskDesc.GetHashCode();
      if (FinishConditionID != 0) hash ^= FinishConditionID.GetHashCode();
      if (TargetProcess != 0) hash ^= TargetProcess.GetHashCode();
      hash ^= actMulCondTaskAward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxDoneCount != 0) {
        output.WriteRawTag(168, 145, 10);
        output.WriteInt32(MaxDoneCount);
      }
      if (FinishConditionID != 0) {
        output.WriteRawTag(208, 226, 10);
        output.WriteInt32(FinishConditionID);
      }
      if (SeqID != 0) {
        output.WriteRawTag(232, 243, 10);
        output.WriteInt32(SeqID);
      }
      if (TaskID != 0) {
        output.WriteRawTag(176, 247, 10);
        output.WriteInt32(TaskID);
      }
      if (TaskDesc.Length != 0) {
        output.WriteRawTag(194, 250, 11);
        output.WriteString(TaskDesc);
      }
      if (MulCondType != 0) {
        output.WriteRawTag(232, 224, 12);
        output.WriteInt32(MulCondType);
      }
      actMulCondTaskAward_.WriteTo(output, _repeated_actMulCondTaskAward_codec);
      if (TaskName.Length != 0) {
        output.WriteRawTag(210, 186, 14);
        output.WriteString(TaskName);
      }
      if (TargetProcess != 0) {
        output.WriteRawTag(248, 208, 14);
        output.WriteInt32(TargetProcess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskID != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TaskID);
      }
      if (SeqID != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(SeqID);
      }
      if (MaxDoneCount != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(MaxDoneCount);
      }
      if (MulCondType != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(MulCondType);
      }
      if (TaskName.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(TaskName);
      }
      if (TaskDesc.Length != 0) {
        size += 3 + pb::CodedOutputStream.ComputeStringSize(TaskDesc);
      }
      if (FinishConditionID != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(FinishConditionID);
      }
      if (TargetProcess != 0) {
        size += 3 + pb::CodedOutputStream.ComputeInt32Size(TargetProcess);
      }
      size += actMulCondTaskAward_.CalculateSize(_repeated_actMulCondTaskAward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pbActMulCondTask other) {
      if (other == null) {
        return;
      }
      if (other.TaskID != 0) {
        TaskID = other.TaskID;
      }
      if (other.SeqID != 0) {
        SeqID = other.SeqID;
      }
      if (other.MaxDoneCount != 0) {
        MaxDoneCount = other.MaxDoneCount;
      }
      if (other.MulCondType != 0) {
        MulCondType = other.MulCondType;
      }
      if (other.TaskName.Length != 0) {
        TaskName = other.TaskName;
      }
      if (other.TaskDesc.Length != 0) {
        TaskDesc = other.TaskDesc;
      }
      if (other.FinishConditionID != 0) {
        FinishConditionID = other.FinishConditionID;
      }
      if (other.TargetProcess != 0) {
        TargetProcess = other.TargetProcess;
      }
      actMulCondTaskAward_.Add(other.actMulCondTaskAward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 166056: {
            MaxDoneCount = input.ReadInt32();
            break;
          }
          case 176464: {
            FinishConditionID = input.ReadInt32();
            break;
          }
          case 178664: {
            SeqID = input.ReadInt32();
            break;
          }
          case 179120: {
            TaskID = input.ReadInt32();
            break;
          }
          case 195906: {
            TaskDesc = input.ReadString();
            break;
          }
          case 209000: {
            MulCondType = input.ReadInt32();
            break;
          }
          case 219674: {
            actMulCondTaskAward_.AddEntriesFrom(input, _repeated_actMulCondTaskAward_codec);
            break;
          }
          case 236882: {
            TaskName = input.ReadString();
            break;
          }
          case 239736: {
            TargetProcess = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
